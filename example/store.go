// Code generated by norm. DO NOT EDIT.
// Generated on: 2020-12-16 18:58:35.830282703 -0800 PST m=+0.001794084
package example

import (
	"database/sql"
	_ "github.com/lib/pq"
)

type Norm struct {
	db *sql.DB
}

func NewNorm(connStr string) (*Norm, error) {
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		return nil, err
	}
	if err := db.Ping(); err != nil {
		return nil, err
	}
	return &Norm{db}, nil
}

func (n *Norm) Close() {
	n.db.Close()
}

type GetUserListNoModelResult struct {
	stmt *sql.Stmt
	rows *sql.Rows
}

func (res GetUserListNoModelResult) Next() bool {
	return res.rows.Next()
}

func (res GetUserListNoModelResult) Scan(ID *int, Email **string) error {
	return res.rows.Scan(ID, Email)
}

func (res GetUserListNoModelResult) Close() {
	if res.rows != nil {
		res.rows.Close()
	}
	if res.stmt != nil {
		res.stmt.Close()
	}
}

// Retrieves all emails from the users table
func (n *Norm) GetUserListNoModelScan(limit int, offset int) (*GetUserListNoModelResult, error) {
	result := GetUserListNoModelResult{}
	var err error
	result.stmt, err = n.db.Prepare(`SELECT id, email
FROM users
LIMIT $1
OFFSET $2`)
	if err != nil {
		return nil, err
	}
	result.rows, err = result.stmt.Query(limit, offset)
	if err != nil {
		defer result.stmt.Close()
		return nil, err
	}
	return &result, nil
}

type GetUserListNoModelOutput struct {
	ID    int
	Email *string
}

func (n *Norm) GetUserListNoModel(limit int, offset int) ([]GetUserListNoModelOutput, error) {
	res, err := n.GetUserListNoModelScan(limit, offset)
	if err != nil {
		return nil, err
	}
	defer res.Close()
	var ret []GetUserListNoModelOutput
	for res.Next() {
		var o GetUserListNoModelOutput
		if err := res.Scan(&o.ID, &o.Email); err != nil {
			return ret, err
		}
		ret = append(ret, o)
	}
	return ret, nil
}

type GetUserListWithModelResult struct {
	stmt *sql.Stmt
	rows *sql.Rows
}

func (res GetUserListWithModelResult) Next() bool {
	return res.rows.Next()
}

func (res GetUserListWithModelResult) Scan(ID *int, Email **string) error {
	return res.rows.Scan(ID, Email)
}

func (res GetUserListWithModelResult) Close() {
	if res.rows != nil {
		res.rows.Close()
	}
	if res.stmt != nil {
		res.stmt.Close()
	}
}

// Retrieves all emails from the users table
func (n *Norm) GetUserListWithModelScan(limit int, offset int) (*GetUserListWithModelResult, error) {
	result := GetUserListWithModelResult{}
	var err error
	result.stmt, err = n.db.Prepare(`SELECT id, email
FROM users
LIMIT $1
OFFSET $2`)
	if err != nil {
		return nil, err
	}
	result.rows, err = result.stmt.Query(limit, offset)
	if err != nil {
		defer result.stmt.Close()
		return nil, err
	}
	return &result, nil
}

func (n *Norm) GetUserListWithModel(limit int, offset int) ([]User, error) {
	res, err := n.GetUserListWithModelScan(limit, offset)
	if err != nil {
		return nil, err
	}
	defer res.Close()
	var ret []User
	for res.Next() {
		var o User
		if err := res.Scan(&o.ID, &o.Email); err != nil {
			return ret, err
		}
		ret = append(ret, o)
	}
	return ret, nil
}
